#!/bin/bash
# 系统信息报告，可生成文本文件

PROGNAME=$(basename $0)
TITLE="$HOSTNAME系统信息报告"
CURRENT_TIME=$(date +"%x %r %z")
TIMESTAMP="由$USER生成于$CURRENT_TIME"

PROGNAME=$(basename $0)			# 程序名称
interactive=					# 重写文件是否提醒
filename=						# 输出文件名

# 使用方法说明
function usage {
    echo "$PROGNAME：使用方法：$PROGNAME [-f file | -i]"
	return
}

# 报告开机到现在的时间
function report_uptime {
    cat <<EOF
<h2>系统运行时长</h2>
<pre>$(uptime)</pre>
EOF
	return
}

# 报告磁盘使用情况
function report_disk_space {
    cat <<EOF
<h2>磁盘使用情况</h2>
<pre>$(df -h)</pre>
EOF
	return
}

# 报告家目录内存占用
function report_home_space {
	local format="%8s%10s%10s\n"
	local i dir_list total_files total_dirs total_Size user_name

	# 根据当前用户判断用户名和所需文件
	if [[ $(id -u) -eq 0 ]]; then
		dir_list=/home/*
		user_name="所有用户"
	else
		dir_list=$HOME
		user_name=$USER
	fi

	echo "<h2>家目录内存占用($user_name)</h2>"

	for i in $dir_list; do

		total_files=$(find $i -type f | wc -l)
		totle_dirs=$(find $i -type d | wc -l)
		total_size=$(du -sh $i | cut -f 1)

		echo "<h3>$i</h3>"
		echo "<pre>"
		printf "$format" "文件夹" "文件" "大小"
		printf "$format" "------" "----" "----"
		printf "$format" $totle_dirs $total_files $total_size
		echo "</pre>"
	done
	return

}

# 输出html
function write_html_page {
    cat <<EOF
<!DOCTYPE html>
<html>
  <head>
	<meta CHARSET="UTF-8"/>
    <title>$TITLE</title>
  </head>
  <body>
	<h1>$TITLE</h1>
	<p>$TIMESTAMP</p>
	$(report_uptime)
	$(report_disk_space)
	$(report_home_space)
  </body>
</html>
EOF
}

# 处理命令行参数
while [[ -n $1 ]]; do
	case $1 in
		-f | --file) shift
					 if [[ -n $1 ]]; then
						 filename=$1
					 else
						 usage >&2
					 fi
					 ;;
		-i | --interactive) interactive=1
							;;
		-h | --help) usage
					 exit
					 ;;
		*) usage >&2
		   exit 1
		   ;;
	esac
	shift
done

# 交互模式
if [[ -n $interactive ]]; then

	# 如果使用了-i参数，还使用了-f参数就报错
	if [[ -n $filename ]]; then
		usage >&2
		exit 1
	fi

	while true; do
		read -p "文件名： " filename
		if [[ -e $filename ]]; then # 文件已存在
			read -p "'$filename' 已存在. 是否重写? [y/n/q] > "
			case $REPLY in
				Y|y) break		# 重写
					 ;;
				Q|q) echo "再见!"
					 exit
					 ;;
				*) continue		# 不重写,继续
				   ;;
			esac

		elif [[ -z $filename ]]; then # 未输入文件名
			continue
		else					# 输入了文件名,且不存在
			break
		fi
	done
fi

# 开始输出内容

if [[ -n $filename ]]; then
	if touch $filename && [[ -f $filename ]]; then
		write_html_page > $filename
	else
		echo "$PROGNAME:不能写入文件'$filename'" >&2
		exit 1
	fi
else
	write_html_page
fi

exit
