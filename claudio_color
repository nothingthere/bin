#!/bin/bash
# 为字符串添加颜色

color=							# 最终确定的颜色
string=							# 需转变的字符串
declare -A colors				# 存放不同颜色的关联数组
# 初始化关联数组
colors["black"]="\033[0;30m"
colors["red"]="\033[0;31m"
colors["green"]="\033[0;32m"
colors["brown"]="\033[0;33m"
colors["blue"]="\033[0;34m"
colors["purple"]="\033[0;35m"
colors["dark-gray"]="\033[1;30m"
colors["light-red"]="\033[1;31m"
colors["light-green"]="\033[1;32m"
colors["yellow"]="\033[1;33m"
colors["light-blue"]="\033[1;34m"
colors["light-purple"]="\033[1;35m"

function list_colors {
    for c in "${!colors[@]}"; do
		echo -e "\t${colors[$c]}${c}\033[0;0m"
	done
}

function usage {
    echo "${0##*/}用法：${0##*/} -c|--color 颜色 字符串"
	echo "'颜色'的值可为："
	list_colors
}

# 处理参数
while [[ -n $1 ]]; do
	case $1 in
		-c|--color) shift
					color="$1"
					;;
		*) string="$1"
		   ;;
	esac
	shift
done

# echo "\$color = $color"			# TEST
# echo "\$string = $string"		# TEST

# 确定string和color变量是否都确定
if [[ -z $color || -z $string ]]; then
	{
		echo "未指定颜色或需更改的字符串"
		usage
	} >&2
	exit 1
fi

# 检查color变量是否合法
is_color_legal=false			# 默认color变量值不合法
for c in "${!colors[@]}"; do
	if [[ ${color,,} == $c ]]; then
		is_color_legal=true
		break
	fi
done

# echo $is_color_legal 			# TEST

if $is_color_legal; then
	printf "${colors[${color,,}]}${string}\033[0;0m"
else
	{
		echo "'$color'：不是合法的颜色"
		usage
	} >&2

	exit 1
fi
